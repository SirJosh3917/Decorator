using Decorator.Helpers;

using System;
using System.Collections.Generic;
using System.Reflection;

namespace Decorator
{
	/// <summary>
	/// Deserializes any message to a type.
	/// </summary>
	/// <typeparam name="TClass">The type of the class.</typeparam>
	/// <autogeneratedoc />
	public static class Deserializer<TItem>
	{
		private static FunctionWrapper _tryDeserialize;
		private static FunctionWrapper _tryDeserializeRepeatable;
		private static MessageDefinition def;

		static Deserializer()
		{
			def = MessageManager.GetDefinitionFor<TItem>();
			if (def is null) throw new Exceptions.InvalidMessageException(typeof(TItem));

			var methods = typeof(Deserializer<TItem>)
							.GetMethods();

			var genericTType = typeof(object).MakeByRefType();
			var genericIEnumerableTType = typeof(object[]).MakeByRefType();

			// TODO: put the 'foreach' precursor stuff in a function, not the HandleParam stuff

			foreach (var method in methods)
				if (method.IsGenericMethodDefinition)
					foreach (var parameter in method.MakeGenericMethod(typeof(object))
										.GetParameters())
						HandleParam(genericTType, genericIEnumerableTType, method, parameter);
		}

		private static void HandleParam(Type genericTType, Type genericIEnumerableTType, MethodInfo method, ParameterInfo parameter)
		{
			if (parameter.IsOut)
				if (parameter.ParameterType == genericTType)
					_tryDeserialize = new FunctionWrapper(method);
				else if (parameter.ParameterType == genericIEnumerableTType)
					_tryDeserializeRepeatable = new FunctionWrapper(method);
		}

		/// <summary>Attempts to deserialize the <see cref="BaseMessage" /><paramref name="m" /> to a <typeparamref name="TItem" /></summary>
		/// <typeparam name="TItem">The message class type</typeparam>
		/// <param name="m">The message to deserialize into a <typeparamref name="TItem" /></param>
		/// <param name="result">The result of the deserialization</param>
		/// <example><code>
		/// [Message("12o")]
		/// public class Oatmeal
		/// {
		///		[Position(0), Required]
		///		public int One { get; set; }
		///
		///		[Position(1), Required]
		///		public int Two { get; set; }
		///
		///		[Position(2), Required]
		///		public string Oatmeal { get; set; }
		/// }
		///
		/// var result = Deserializer.TryDeserializeItem<Oatmeal>(new BasicMessage("12o", 1, 2, "oatmeal", out var oatmeal);
		///
		/// if (result)
		/// {
		///		Console.WriteLine($"{oatmeal.One}, {oatmeal.Two}, {oatmeal.Oatmeal}\nKirby is a pink guy");
		/// }
		///
		/// // should output:
		///
		/// // 1, 2, oatmeal
		/// // Kirby is a pink guy
		/// </code></example>
		/// <returns>
		/// <para><c>true</c> if it was able to deserialize <paramref name="m" /> into a <typeparamref name="TItem" />, with <paramref name="result" /> containing the valid result, or</para>
		/// <para><c>false</c> if it was unable to deserialize <paramref name="m" /> into a <typeparamref name="TItem" /></para></returns>
		/// <exception cref="ArgumentNullException">Thrown when <paramref name="m> <c>is</c> <c>null</c></exception>
		/// <seealso cref="TryDeserializeItem(Type, BaseMessage, out object)"/>
		public static bool TryDeserializeItem(BaseMessage m, out TItem result)
		{
			if (m is null) throw new ArgumentNullException(nameof(m));

			if (!EnsureAttributesOn(m)) return TryMethodHelpers.EndTryMethod(false, default, out result);

			return TryDeserializeValue(m, out result);
		}

		/// <summary>
		/// Attempts to deserialize the <paramref name="m"/> to a <see cref="IEnumerable{TItem}"/>, and returns whether or not it can.
		/// </summary>
		/// <typeparam name="TItem">The type of the item.</typeparam>
		/// <param name="m">The message.</param>
		/// <param name="result">The result after deserialization</param>
		/// <example><code>
		/// [Message("example"), Repeatable]
		/// public class TestyClass
		/// {
		///		[Position(0), Required]
		///		public int Id { get; set; }
		///
		///		[Position(2), Required]
		///		public string Name { get; set; }
		/// }
		///
		/// var result = Deserializer.TryDeserializeItems<TestyClass>(new BasicMessage("example", 0, "John", 1, "Mac", 2, "Mark", 3, "Zuccy", 4, "Johnny"), out var items);
		///
		/// if (result)
		/// {
		///		foreach (var i in items)
		///		{
		///			Console.WriteLine($"{i.Id} - {i.Name}");
		///		}
		/// }
		///
		/// // should output:
		/// // 0 - John
		/// // 1 - Mac
		/// // 2 - Mark
		/// // 3 - Zuccy
		/// // 4 - Johnny
		/// </code></example>
		/// <returns><c>true</c> if it can deserialize it, <c>false</c> if it can't</returns>
		public static bool TryDeserializeItems(BaseMessage m, out TItem[] result)
		{
			if (m is null) throw new ArgumentNullException(nameof(m));

			if (!EnsureAttributesOn(m)) return TryMethodHelpers.EndTryMethod(false, default, out result);

			return TryDeserializeValues(m, out result);
		}

		#region backwards compatability
		[Obsolete("please use the appropriate Decorator class (MethodDeserializer<TClass>.InvokeMethodFromMessage is what you're looking for)", true)]
		public static void InvokeMethodFromMessage(params object[] objs)
		{
			throw new Exceptions.DecoratorException("old");
		}

		[Obsolete("please use the appropriate Decorator class (Deserializer<TItem, TClass>.InvokeMethodFromItem is what you're looking for)", true)]
		public static void InvokeMethodFromItem(params object[] objs)
		{
			throw new Exceptions.DecoratorException("old");
		}
		#endregion

		private static bool TryDeserializeValue(BaseMessage m, out TItem result)
		{
			// prevent boxing calls
			var instance = (object)InstanceOf<TItem>.Create();

			var lastPosAttrib = 0;
			var position = 0;

			foreach (var i in def.Properties)
			{
				var increase = i.PositionInt - lastPosAttrib;
				position += increase;
				lastPosAttrib = i.PositionInt;

				//TODO: put this flatten stuff in a function
				if (i.Flatten)
				{
					var definition = MessageManager.GetDefinitionForType(i.Type);
					if (definition is null) return TryMethodHelpers.EndTryMethod(false, default, out result);

					var len = definition.MaximumSize + 1;

					//TODO: get the exact length, for now this is fine
					var arrCpy = new object[len];

					if (m.IntCount < position + len) return TryMethodHelpers.EndTryMethod(false, default, out result);

					Array.Copy(m.Arguments, position, arrCpy, 0, len);

					//TODO: add generic TryDeserializeValue
					if (!Deserializer.TryDeserializeItem(i.Type, new BasicMessage(definition.Type, arrCpy), out var res))
						return TryMethodHelpers.EndTryMethod(false, default, out result);

					i.Set(instance, res);
					position += len - 1;
				} else if (PropertyQualifies(i, m, position))
				{
					i.Set(instance, m.Arguments[position]);
				}
				else if (i.Treatment != TypeTreatment.Optional) return TryMethodHelpers.EndTryMethod(false, default, out result);
			}

			m._desSize = position + 1;
			return TryMethodHelpers.EndTryMethod(true, (TItem)instance, out result);
		}

		private static bool TryDeserializeValues(BaseMessage m, out TItem[] result)
		{
			var itms = new List<TItem>(m.IntCount);

			var array = m.Arguments;
			var bm = new BasicMessage(m.Type, array);
			var _desSizeCounter = 0;

			while (TryDeserializeValue(bm, out var res))
			{
				itms.Add(res);

				_desSizeCounter += bm._desSize;

				var size = m.IntCount - _desSizeCounter;
				array = new object[size];
				Array.Copy(m.Arguments, _desSizeCounter, array, 0, size);

				bm = new BasicMessage(m.Type, array);
			}

			return array.Length > 0 ?
						TryMethodHelpers.EndTryMethod<TItem[]>(false, default, out result)
						: TryMethodHelpers.EndTryMethod<TItem[]>(true, itms.ToArray(), out result);
		}

		private static bool PropertyQualifies(MessageProperty prop, BaseMessage m, int position)
		{
			if (position >= m.IntCount) return false;

			var item = m.Arguments[position];

			return
				item is null ?
					false
					: prop.Type == item.GetType();
		}

		private static bool EnsureAttributesOn(BaseMessage m)
			=> m.Type == def.Type;
	}
}