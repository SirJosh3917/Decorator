using System;
using System.Collections.Generic;

namespace Decorator
{
	/// <summary>An abstract class that has the minimim required for you to classify a custom class as a message.</summary>
	public abstract class BaseMessage : IEquatable<BaseMessage>
	{
		/// <summary>Gets the type.</summary>
		/// <value>The type.</value>
		/// <autogeneratedoc />
		public abstract string Type { get; }

		/// <summary>Gets the arguments.</summary>
		/// <value>The arguments.</value>
		/// <autogeneratedoc />
		public abstract object[] Arguments { get; }

		/// <summary>Gets the count.</summary>
		/// <value>The count.</value>
		/// <autogeneratedoc />
		private int _countCache = -1;
		public virtual int Count
		{
			get
			{
				if (_countCache != -1) return _countCache;

				_countCache =
					Arguments == null ?
						0 :
						Arguments.Length;

				return _countCache;
			}
		}

		internal int _desSize;

		/// <summary>Gets the <see cref="System.Object"/> at the specified index of <see cref="BaseMessage.Arguments"/>.</summary>
		/// <value>The <see cref="System.Object"/>.</value>
		/// <param name="index">The index.</param>
		/// <returns></returns>
		/// <autogeneratedoc />
		public object this[uint index] => Arguments[index];

		public bool Equals(BaseMessage other)
		{
			// reference
			if (ReferenceEquals(this, other)) return true;

			// passed null
			if (other == null) return false;

			// via type
			if (Type != other.Type) return false;

			// via reference type
			if (Arguments == other.Arguments) return true;

			// null/non-null args
			if (Arguments == null && !(other.Arguments == null)) return false;
			if (!(Arguments == null) && other.Arguments == null) return false;

			// wrong arg length
			if (other.Count != Count) return false;

			// ensure every element in arguments isn't null
			return ValueEquals(Arguments, other.Arguments);
		}

		/// <summary>Determines whether the specified <see cref="System.Object" />, is equal to this instance.</summary>
		/// <param name="obj">The <see cref="System.Object" /> to compare with this instance.</param>
		/// <returns><c>true</c> if the specified <see cref="System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
		/// <autogeneratedoc />
		public override bool Equals(object obj)
		{
			if (obj is BaseMessage bm) return Equals(bm);

			return false;
		}

		/// <summary>Returns a hash code for this instance.</summary>
		/// <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. </returns>
		/// <autogeneratedoc />
		public override int GetHashCode()
		{
			var hashCode = 1627454568;
			hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(Type);
			hashCode = hashCode * -1521134295 + EqualityComparer<object[]>.Default.GetHashCode(Arguments);
			hashCode = hashCode * -1521134295 + Count.GetHashCode();
			return hashCode;
		}

		private static bool ValueEquals(object[] a, object[] b)
		{
			for (var i = 0; i < a.Length; i++)
				if (!a[i].Equals(b[i]))
					return false;
			return true;
		}
	}
}